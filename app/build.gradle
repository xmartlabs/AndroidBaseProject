plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "kotlin-kapt"
    id "org.jetbrains.kotlin.plugin.serialization"
    alias(libs.plugins.easyLauncher)
}

apply from: rootProject.file('scripts/versioning.gradle')
apply from: rootProject.file('scripts/read_properties.gradle')

if (getEnvVariable('KEYSTORE_FILE') != null) {
    // Avoid Signing not ready issues in Gradle Play Publisher plugin
    apply from: rootProject.file('scripts/snapshot_publish.gradle')
}

// TODO: Enable when the services json is added
// apply plugin: 'com.google.gms.google-services'

// TODO: Setup Crashlytics
def CRASHLYTICS_ENABLED = false
if (CRASHLYTICS_ENABLED) {
    apply plugin: 'com.google.firebase.crashlytics'
}


android {
    compileSdkVersion androidVersions.compileSdk
    buildToolsVersion androidVersions.buildTools
    namespace "com.xmartlabs.gong"

    defaultConfig {
        applicationId "com.xmartlabs.gong"
        minSdk androidVersions.minSdk
        targetSdk androidVersions.targetSdk
        versionCode 1
        versionName ""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        // Used to define some constants like the share preferences's file name.
        buildConfigField 'String', 'APP_NAME', '"Gong"'
        buildConfigField 'boolean', 'CRASHLYTICS_ENABLED', "$CRASHLYTICS_ENABLED"
        buildConfigField 'String', 'SUPABASE_API_KEY', getEnvVariable('SUPABASE_API_KEY')
    }

    buildFeatures {
        buildConfig true
        compose true
    }

    signingConfigs {
        release {
            storeFile getEnvVariable('KEYSTORE_FILE') == null ? null : file(getEnvVariable('KEYSTORE_FILE'))
            storePassword getEnvVariable('KEYSTORE_PASSWORD')
            keyAlias getEnvVariable('KEYSTORE_KEY_ALIAS')
            keyPassword getEnvVariable('KEYSTORE_KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (getEnvVariable('KEYSTORE_FILE') != null) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            minifyEnabled getEnvVariable('MINIFY_CODE', false) as Boolean
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "env"
    productFlavors {
        dev {
            buildConfigField 'String', 'API_BASE_URL', getEnvVariable('API_DEV_SERVER_URL')

            dimension "env"
            applicationIdSuffix '.dev'
        }
        prod {
            buildConfigField 'String', 'API_BASE_URL', getEnvVariable('API_PROD_SERVER_URL')

            dimension "env"
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE' // will not include LICENSE file
    }

    lintOptions {
        lintConfig file("lint.xml")
        disable "ObsoleteLintCustomCheck"
        fatal 'StopShip'
        warningsAsErrors true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_19
        targetCompatibility JavaVersion.VERSION_19
    }

    kotlinOptions {
        languageVersion = "1.8"
        jvmTarget = '19'
        freeCompilerArgs += [
                "-XXLanguage:+InlineClasses",
                "-Xallow-result-return-type",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-opt-in=kotlin.contracts.ExperimentalContracts",
                "-opt-in=kotlin.Experimental",
                "-opt-in=kotlin.time.ExperimentalTime",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=kotlinx.coroutines.FlowPreview",
                "-opt-in=kotlin.ExperimentalStdlibApi",
        ]
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.compiler.get()
    }
}

dependencies {
    androidTestImplementation libs.bundles.androidXTest

    debugImplementation libs.leakcanary
    debugImplementation libs.bundles.networking.debug
    debugImplementation libs.bundles.flipper

    implementation libs.androidX.core.splashscreen
    implementation libs.androidX.room.core
    implementation libs.androidX.dataStore
    implementation libs.coil
    implementation libs.once
    implementation libs.firebase.crashlytics
    implementation libs.koin.compose
    implementation libs.timber
    implementation libs.store

    implementation libs.bundles.accompanist
    implementation libs.bundles.androidSwissKnife
    implementation libs.bundles.compose
    implementation libs.bundles.kotlin
    implementation libs.bundles.networking.core

    kapt libs.androidX.room.compiler

    testImplementation libs.junit
}

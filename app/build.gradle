buildscript {
    addRepos(repositories)
    dependencies {
        classpath buildscriptDeps.firebaseCrashlyticsPlugin
        classpath buildscriptDeps.snapshotPublisher
        classpath buildscriptDeps.navigationSafeArgPlugin
    }
}

apply plugin: 'com.android.application'
apply from: rootProject.file('scripts/versioning.gradle')
apply from: rootProject.file('scripts/read_properties.gradle')
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'

if (getEnvVariable('KEYSTORE_FILE') != null) {
    // Avoid Signing not ready issues in Gradle Play Publisher plugin
    apply from: rootProject.file('scripts/snapshot_publish.gradle')
}

// TODO: Enable when the services json is added
// apply plugin: 'com.google.gms.google-services'

// TODO: Enable Crashlytics
// apply plugin: 'com.google.firebase.crashlytics'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion androidVersions.compileSdk
    buildToolsVersion androidVersions.buildTools

    defaultConfig {
        applicationId "com.xmartlabs.gong"
        minSdkVersion androidVersions.minSdk
        targetSdkVersion androidVersions.targetSdk
        versionCode 1
        versionName ""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        // Used to define some constants like the share preferences's file name.
        buildConfigField 'String', 'APP_NAME', '"Gong"'
    }
    buildFeatures.viewBinding = true
    signingConfigs {
        release {
            storeFile getEnvVariable('KEYSTORE_FILE') == null ? null : file(getEnvVariable('KEYSTORE_FILE'))
            storePassword getEnvVariable('KEYSTORE_PASSWORD')
            keyAlias getEnvVariable('KEYSTORE_KEY_ALIAS')
            keyPassword getEnvVariable('KEYSTORE_KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (getEnvVariable('KEYSTORE_FILE') != null) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            minifyEnabled getEnvVariable('MINIFY_CODE', false) as Boolean
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "env"
    productFlavors {
        dev {
            buildConfigField 'String', 'API_BASE_URL', getEnvVariable('API_DEV_SERVER_URL')

            dimension "env"
            ext.buildTypeCode = 0
            applicationIdSuffix '.dev'
        }
        prod {
            buildConfigField 'String', 'API_BASE_URL', getEnvVariable('API_PROD_SERVER_URL')

            dimension "env"
            ext.buildTypeCode = 4
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE' // will not include LICENSE file
    }

    lintOptions {
        lintConfig file("lint.xml")
        disable "UnsafeExperimentalUsageError", "UnsafeExperimentalUsageWarning"
        fatal 'StopShip'
        warningsAsErrors true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    androidExtensions {
        experimental = true
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ["-XXLanguage:+InlineClasses", "-Xopt-in=kotlin.RequiresOptIn", "-Xallow-result-return-type"]
    }
}

dependencies {
    androidTestImplementation deps.androidX.test.junit
    androidTestImplementation deps.androidX.test.espresso

    debugImplementation deps.debugDb
    debugImplementation deps.leakcanary

    devImplementation deps.androidSwissKnife.navigationDebug

    implementation deps.androidSwissKnife.core
    implementation deps.androidSwissKnife.dataStore
    implementation deps.androidSwissKnife.navigation
    implementation deps.androidX.appcompat
    implementation deps.androidX.cardview
    implementation deps.androidX.constraintLayout
    implementation deps.androidX.dataStore
    implementation deps.androidX.design
    implementation deps.androidX.lifecycle.livedata
    implementation deps.androidX.lifecycle.runtime
    implementation deps.androidX.lifecycle.saveState
    implementation deps.androidX.lifecycle.viewmodel
    implementation deps.androidX.navigation.fragment
    implementation deps.androidX.navigation.ui
    implementation deps.androidX.recyclerview
    implementation deps.androidX.room.coreKtx
    implementation deps.androidX.transition
    implementation deps.androidX.viewPager2
    implementation deps.coil
    implementation deps.firebase.crashlytics
    implementation deps.koin.android
    implementation deps.koin.fragments
    implementation deps.koin.scope
    implementation deps.koin.viewModel
    implementation deps.kotlin.core
    implementation deps.kotlin.coroutines.core
    implementation deps.kotlin.reflect
    implementation deps.okhttp3.core
    implementation deps.okhttp3.loggingIntercepror
    implementation deps.okhttp3.ok2CurlInterceptor
    implementation deps.okhttp3.stetho
    implementation deps.okhttp3.urlconnection
    implementation deps.okIo
    implementation deps.once
    implementation deps.retrofit2.core
    implementation deps.retrofit2.gsonAdapter
    implementation deps.stetho
    implementation deps.timber

    kapt deps.androidX.room.compiler

    testImplementation deps.junit
}
